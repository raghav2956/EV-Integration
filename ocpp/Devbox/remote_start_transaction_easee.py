import asyncio
import logging
from datetime import datetime, timedelta

try:
    import websockets
except ModuleNotFoundError:
    print("This example relies on the 'websockets' package.")
    print("Please install it by running: ")
    print()
    print(" $ pip install websockets")
    import sys

    sys.exit(1)

from ocpp.routing import on
from ocpp.v16 import ChargePoint as cp
from ocpp.v16 import call, call_result
from ocpp.v16.enums import Action, RegistrationStatus, ClearCacheStatus
from ocpp.v16 import datatypes

logging.basicConfig(level=logging.INFO)


config_status = {}
charge_points = {}


# Define IdTagInfoStatus manually
class IdTagInfoStatus:
    accepted = "Accepted"
    blocked = "Blocked"
    expired = "Expired"
    invalid = "Invalid"
    concurrent_tx = "ConcurrentTx"


class ChargePoint(cp):
    @on(Action.BootNotification)
    async def on_boot_notification(
        self, charge_point_vendor: str, charge_point_model: str, **kwargs
    ):
    
        # await boot_notification_call(self, charge_point_model, charge_point_vendor)
        return call_result.BootNotificationPayload(
            current_time=datetime.utcnow().isoformat(),
            interval=10,
            status=RegistrationStatus.accepted,
        )

    @on(Action.Heartbeat)
    def on_heartbeat(self):
        print("Got a Heartbeat!")
        return call_result.HeartbeatPayload(
            current_time=datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S") + "Z"
        )
        
    @on(Action.StatusNotification)
    async def on_status_notification(
        self, connector_id: int, error_code: str, status: str, **kwargs
    ):
        logging.info(f"StatusNotification received: Connector ID: {connector_id}, "
                     f"Status: {status}, Error Code: {error_code}")
        # You can process the status here (e.g., log it, update a database, etc.)
        return call_result.StatusNotificationPayload()

    @on(Action.StartTransaction)
    async def on_start_transaction(
        self, connector_id: int, id_tag: str, timestamp: str, meter_start: int, **kwargs
    ):
        logging.info(f"StartTransaction received: Connector ID: {connector_id}, "
                     f"ID Tag: {id_tag}, Timestamp: {timestamp}, Meter Start: {meter_start}")
        
        # Normally, you'd perform validation here, such as checking the id_tag in your database.
        # For now, let's assume the transaction is always authorized.
        
        # Send a StartTransactionResponse with a transaction ID and status.
        return call_result.StartTransactionPayload(
            transaction_id=1,  # This should be a unique ID, typically generated by your system
            id_tag_info={
                "status": IdTagInfoStatus.accepted,
                "expiryDate": (datetime.utcnow() + timedelta(days=365)).isoformat() + "Z",
            }
        )

    @on(Action.MeterValues)
    async def on_meter_values(
        self, connector_id: int, transaction_id: int, meter_value: list, **kwargs
    ):
        logging.info(f"MeterValues received: Connector ID: {connector_id}, "
                     f"Transaction ID: {transaction_id}, Meter Values: {meter_value}")
        
        # Here, you would typically process and store the meter values, e.g., update a database.
        
        # Respond with an empty payload as per the OCPP 1.6 specification.
        return call_result.MeterValuesPayload()

    @on(Action.StopTransaction)
    async def on_stop_transaction(
        self, transaction_id: int, meter_stop: int, timestamp: str, id_tag: str = None, **kwargs
    ):
        """
        Handle StopTransaction requests sent by the charge point.

        Parameters:
        - transaction_id (int): The ID of the transaction being stopped.
        - meter_stop (int): The meter reading at the end of the transaction (in Wh or kWh).
        - timestamp (str): The timestamp when the transaction was stopped.
        - id_tag (str, optional): The ID tag used to stop the transaction, if available.
        """
        logging.info(f"StopTransaction received: Transaction ID: {transaction_id}, "
                     f"Meter Stop: {meter_stop}, Timestamp: {timestamp}, ID Tag: {id_tag}")
        
        # You might want to log the transaction details to a database or perform other actions here.
        # Example: Update transaction status in the database, calculate the total energy consumed, etc.
        
        # Send a StopTransactionResponse
        return call_result.StopTransactionPayload(
            id_tag_info={
                "status": "Accepted",
            }
        )
        
async def send_remote_start_transaction(cp, id_tag, connector_id=None):
    """
    Sends a RemoteStartTransaction request to the charge point.

    Parameters:
    - cp (ChargePoint): The ChargePoint instance representing the charger.
    - id_tag (str): The identifier (typically an RFID tag) that authorizes the transaction.
    - connector_id (int, optional): The specific connector on the charge point. If None, the charge point may select a connector automatically.
    """
    # Create the RemoteStartTransaction request payload
    request = call.RemoteStartTransactionPayload(
        id_tag=id_tag,
        connector_id=connector_id
    )

    try:
        # Send the RemoteStartTransaction request and wait for the response
        timeout_seconds = 180
        response = await asyncio.wait_for(cp.call(request), timeout=timeout_seconds)

        if response.status == "Accepted":
            print(f"Transaction started successfully for idTag: {id_tag}")
        else:
            print(f"Failed to start transaction for idTag: {id_tag}: {response.status}")
            
    except asyncio.TimeoutError:
        logging.error(f"Timed out waiting for the RemoteStartTransaction response after {timeout_seconds} seconds.")
    
    except Exception as e:
        logging.error(f"Error sending RemoteStartTransaction: {e}")


        
async def on_connect(websocket, path):
    """For every new charge point that connects, create a ChargePoint
    instance and start listening for messages.
    """

    logging.info(f"Received connection from {path}")
    logging.info(f"Request headers: {websocket.request_headers}")
    try:
        requested_protocols = websocket.request_headers["Sec-WebSocket-Protocol"]
    except KeyError:
        logging.error("Client hasn't requested any Subprotocol. Closing Connection")
        return await websocket.close()
    if websocket.subprotocol:
        logging.info("Protocols Matched: %s", websocket.subprotocol)
    else:
        # In the websockets lib if no subprotocols are supported by the
        # client and the server, it proceeds without a subprotocol,
        # so we have to manually close the connection.
        logging.warning(
            "Protocols Mismatched | Expected Subprotocols: %s,"
            " but client supports  %s | Closing connection",
            websocket.available_subprotocols,
            requested_protocols,
        )
        return await websocket.close()

    charge_point_id = path.strip("/")
    print(charge_point_id)

    cp = ChargePoint(charge_point_id, websocket)

    # Add the connected charge point to the dictionary
    charge_points[charge_point_id] = cp

    # Start the charge point logic in its own task
    start_task = asyncio.create_task(cp.start())

    if not config_status.get(charge_point_id, False):
        # Wait for the specific charger to connect before sending profile
        if charge_point_id == 'UKAGKHTV':
            print(charge_points)
            # Stop the transaction with ID 1
            transaction_id = '1'
            await send_remote_start_transaction(charge_points['UKAGKHTV'], transaction_id)
            config_status[charge_point_id] = True

    # Wait for the start task to complete, which keeps the connection open
    try:
        await start_task
    except asyncio.CancelledError:
        logging.info(f"Connection closed for charge point: {charge_point_id}")
    
    charge_points.pop(charge_point_id, None)

    logging.info(f"Connection handler for {charge_point_id} is terminating")

async def main():
    server = await websockets.serve(
        on_connect, "0.0.0.0", 8080, subprotocols=["ocpp1.6"]
    )

    logging.info("Server Started listening to new connections...")
    await server.wait_closed()


if __name__ == "__main__":
    # asyncio.run() is used when running this example with Python >= 3.7v
    asyncio.run(main())